window.data = {"report":{"notifier":"Laravel Client","language":"PHP","framework_version":"10.40.0","language_version":"8.2.0","exception_class":"ErrorException","seen_at":1705062361,"message":"Undefined array key 100","glows":[],"solutions":[],"documentation_links":[],"stacktrace":[{"file":"D:\\Projects\\my-projects\\peta-log\\app\\Http\\Controllers\\TestController.php","line_number":11,"method":"index","class":"App\\Http\\Controllers\\TestController","code_snippet":{"1":"\u003C?php","2":"","3":"namespace App\\Http\\Controllers;","4":"","5":"use Illuminate\\Http\\Request;","6":"","7":"class TestController extends Controller","8":"{","9":"    public function index(){","10":"        $array = [];","11":"        echo $array[100];","12":"    }","13":"","14":"}","15":""},"arguments":null,"application_frame":true},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Controller.php","line_number":54,"method":"callAction","class":"Illuminate\\Routing\\Controller","code_snippet":{"39":"     *\/","40":"    public function getMiddleware()","41":"    {","42":"        return $this-\u003Emiddleware;","43":"    }","44":"","45":"    \/**","46":"     * Execute an action on the controller.","47":"     *","48":"     * @param  string  $method","49":"     * @param  array  $parameters","50":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","51":"     *\/","52":"    public function callAction($method, $parameters)","53":"    {","54":"        return $this-\u003E{$method}(...array_values($parameters));","55":"    }","56":"","57":"    \/**","58":"     * Handle calls to missing methods on the controller.","59":"     *","60":"     * @param  string  $method","61":"     * @param  array  $parameters","62":"     * @return mixed","63":"     *","64":"     * @throws \\BadMethodCallException","65":"     *\/","66":"    public function __call($method, $parameters)","67":"    {","68":"        throw new BadMethodCallException(sprintf("},"arguments":[],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\ControllerDispatcher.php","line_number":43,"method":"dispatch","class":"Illuminate\\Routing\\ControllerDispatcher","code_snippet":{"28":"    }","29":"","30":"    \/**","31":"     * Dispatch a request to a given controller and method.","32":"     *","33":"     * @param  \\Illuminate\\Routing\\Route  $route","34":"     * @param  mixed  $controller","35":"     * @param  string  $method","36":"     * @return mixed","37":"     *\/","38":"    public function dispatch(Route $route, $controller, $method)","39":"    {","40":"        $parameters = $this-\u003EresolveParameters($route, $controller, $method);","41":"","42":"        if (method_exists($controller, \u0027callAction\u0027)) {","43":"            return $controller-\u003EcallAction($method, $parameters);","44":"        }","45":"","46":"        return $controller-\u003E{$method}(...array_values($parameters));","47":"    }","48":"","49":"    \/**","50":"     * Resolve the parameters for the controller.","51":"     *","52":"     * @param  \\Illuminate\\Routing\\Route  $route","53":"     * @param  mixed  $controller","54":"     * @param  string  $method","55":"     * @return array","56":"     *\/","57":"    protected function resolveParameters(Route $route, $controller, $method)"},"arguments":[{"name":"method","value":"index","original_type":"string","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"parameters","value":[],"original_type":"array","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Route.php","line_number":259,"method":"runController","class":"Illuminate\\Routing\\Route","code_snippet":{"244":"     *\/","245":"    protected function isSerializedClosure()","246":"    {","247":"        return RouteAction::containsSerializedClosure($this-\u003Eaction);","248":"    }","249":"","250":"    \/**","251":"     * Run the route action and return the response.","252":"     *","253":"     * @return mixed","254":"     *","255":"     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException","256":"     *\/","257":"    protected function runController()","258":"    {","259":"        return $this-\u003EcontrollerDispatcher()-\u003Edispatch(","260":"            $this, $this-\u003EgetController(), $this-\u003EgetControllerMethod()","261":"        );","262":"    }","263":"","264":"    \/**","265":"     * Get the controller instance for the route.","266":"     *","267":"     * @return mixed","268":"     *\/","269":"    public function getController()","270":"    {","271":"        if (! $this-\u003EisControllerAction()) {","272":"            return null;","273":"        }"},"arguments":[{"name":"route","value":"object","original_type":"Illuminate\\Routing\\Route","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"controller","value":"object","original_type":"App\\Http\\Controllers\\TestController","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"method","value":"index","original_type":"string","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Route.php","line_number":205,"method":"run","class":"Illuminate\\Routing\\Route","code_snippet":{"190":"    {","191":"        return RouteAction::parse($this-\u003Euri, $action);","192":"    }","193":"","194":"    \/**","195":"     * Run the route action and return the response.","196":"     *","197":"     * @return mixed","198":"     *\/","199":"    public function run()","200":"    {","201":"        $this-\u003Econtainer = $this-\u003Econtainer ?: new Container;","202":"","203":"        try {","204":"            if ($this-\u003EisControllerAction()) {","205":"                return $this-\u003ErunController();","206":"            }","207":"","208":"            return $this-\u003ErunCallable();","209":"        } catch (HttpResponseException $e) {","210":"            return $e-\u003EgetResponse();","211":"        }","212":"    }","213":"","214":"    \/**","215":"     * Checks whether the route\u0027s action is a controller.","216":"     *","217":"     * @return bool","218":"     *\/","219":"    protected function isControllerAction()"},"arguments":[],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":806,"method":"Illuminate\\Routing\\{closure}","class":"Illuminate\\Routing\\Router","code_snippet":{"791":"     * @param  \\Illuminate\\Routing\\Route  $route","792":"     * @param  \\Illuminate\\Http\\Request  $request","793":"     * @return mixed","794":"     *\/","795":"    protected function runRouteWithinStack(Route $route, Request $request)","796":"    {","797":"        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026","798":"                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;","799":"","800":"        $middleware = $shouldSkipMiddleware ? [] : $this-\u003EgatherRouteMiddleware($route);","801":"","802":"        return (new Pipeline($this-\u003Econtainer))","803":"                        -\u003Esend($request)","804":"                        -\u003Ethrough($middleware)","805":"                        -\u003Ethen(fn ($request) =\u003E $this-\u003EprepareResponse(","806":"                            $request, $route-\u003Erun()","807":"                        ));","808":"    }","809":"","810":"    \/**","811":"     * Gather the middleware for the given route with resolved class names.","812":"     *","813":"     * @param  \\Illuminate\\Routing\\Route  $route","814":"     * @return array","815":"     *\/","816":"    public function gatherRouteMiddleware(Route $route)","817":"    {","818":"        return $this-\u003EresolveMiddleware($route-\u003EgatherMiddleware(), $route-\u003EexcludedMiddleware());","819":"    }","820":""},"arguments":[],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":144,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":"","134":"    \/**","135":"     * Get the final piece of the Closure onion.","136":"     *","137":"     * @param  \\Closure  $destination","138":"     * @return \\Closure","139":"     *\/","140":"    protected function prepareDestination(Closure $destination)","141":"    {","142":"        return function ($passable) use ($destination) {","143":"            try {","144":"                return $destination($passable);","145":"            } catch (Throwable $e) {","146":"                return $this-\u003EhandleException($passable, $e);","147":"            }","148":"        };","149":"    }","150":"","151":"    \/**","152":"     * Get a Closure that represents a slice of the application onion.","153":"     *","154":"     * @return \\Closure","155":"     *\/","156":"    protected function carry()","157":"    {","158":"        return function ($stack, $pipe) {"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Middleware\\SubstituteBindings.php","line_number":50,"method":"handle","class":"Illuminate\\Routing\\Middleware\\SubstituteBindings","code_snippet":{"24":"    public function __construct(Registrar $router)","25":"    {","26":"        $this-\u003Erouter = $router;","27":"    }","28":"","29":"    \/**","30":"     * Handle an incoming request.","31":"     *","32":"     * @param  \\Illuminate\\Http\\Request  $request","33":"     * @param  \\Closure  $next","34":"     * @return mixed","35":"     *\/","36":"    public function handle($request, Closure $next)","37":"    {","38":"        try {","39":"            $this-\u003Erouter-\u003EsubstituteBindings($route = $request-\u003Eroute());","40":"","41":"            $this-\u003Erouter-\u003EsubstituteImplicitBindings($route);","42":"        } catch (ModelNotFoundException $exception) {","43":"            if ($route-\u003EgetMissing()) {","44":"                return $route-\u003EgetMissing()($request, $exception);","45":"            }","46":"","47":"            throw $exception;","48":"        }","49":"","50":"        return $next($request);","51":"    }","52":"}","53":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:142-148","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken.php","line_number":78,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken","code_snippet":{"63":"     *","64":"     * @param  \\Illuminate\\Http\\Request  $request","65":"     * @param  \\Closure  $next","66":"     * @return mixed","67":"     *","68":"     * @throws \\Illuminate\\Session\\TokenMismatchException","69":"     *\/","70":"    public function handle($request, Closure $next)","71":"    {","72":"        if (","73":"            $this-\u003EisReading($request) ||","74":"            $this-\u003ErunningUnitTests() ||","75":"            $this-\u003EinExceptArray($request) ||","76":"            $this-\u003EtokensMatch($request)","77":"        ) {","78":"            return tap($next($request), function ($response) use ($request) {","79":"                if ($this-\u003EshouldAddXsrfTokenCookie()) {","80":"                    $this-\u003EaddCookieToResponse($request, $response);","81":"                }","82":"            });","83":"        }","84":"","85":"        throw new TokenMismatchException(\u0027CSRF token mismatch.\u0027);","86":"    }","87":"","88":"    \/**","89":"     * Determine if the HTTP request uses a \u2018read\u2019 verb.","90":"     *","91":"     * @param  \\Illuminate\\Http\\Request  $request","92":"     * @return bool"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\View\\Middleware\\ShareErrorsFromSession.php","line_number":49,"method":"handle","class":"Illuminate\\View\\Middleware\\ShareErrorsFromSession","code_snippet":{"23":"     *\/","24":"    public function __construct(ViewFactory $view)","25":"    {","26":"        $this-\u003Eview = $view;","27":"    }","28":"","29":"    \/**","30":"     * Handle an incoming request.","31":"     *","32":"     * @param  \\Illuminate\\Http\\Request  $request","33":"     * @param  \\Closure  $next","34":"     * @return mixed","35":"     *\/","36":"    public function handle($request, Closure $next)","37":"    {","38":"        \/\/ If the current session has an \u0022errors\u0022 variable bound to it, we will share","39":"        \/\/ its value with all view instances so the views can easily access errors","40":"        \/\/ without having to bind. An empty bag is set when there aren\u0027t errors.","41":"        $this-\u003Eview-\u003Eshare(","42":"            \u0027errors\u0027, $request-\u003Esession()-\u003Eget(\u0027errors\u0027) ?: new ViewErrorBag","43":"        );","44":"","45":"        \/\/ Putting the errors in the view for every view allows the developer to just","46":"        \/\/ assume that some errors are always available, which is convenient since","47":"        \/\/ they don\u0027t have to continually run checks for the presence of errors.","48":"","49":"        return $next($request);","50":"    }","51":"}","52":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Session\\Middleware\\StartSession.php","line_number":121,"method":"handleStatefulRequest","class":"Illuminate\\Session\\Middleware\\StartSession","code_snippet":{"106":"     * @param  \\Illuminate\\Contracts\\Session\\Session  $session","107":"     * @param  \\Closure  $next","108":"     * @return mixed","109":"     *\/","110":"    protected function handleStatefulRequest(Request $request, $session, Closure $next)","111":"    {","112":"        \/\/ If a session driver has been configured, we will need to start the session here","113":"        \/\/ so that the data is ready for an application. Note that the Laravel sessions","114":"        \/\/ do not make use of PHP \u0022native\u0022 sessions in any way since they are crappy.","115":"        $request-\u003EsetLaravelSession(","116":"            $this-\u003EstartSession($request, $session)","117":"        );","118":"","119":"        $this-\u003EcollectGarbage($session);","120":"","121":"        $response = $next($request);","122":"","123":"        $this-\u003EstoreCurrentUrl($request, $session);","124":"","125":"        $this-\u003EaddCookieToResponse($response, $session);","126":"","127":"        \/\/ Again, if the session has been configured we will need to close out the session","128":"        \/\/ so that the attributes may be persisted to some storage medium. We will also","129":"        \/\/ add the session identifier cookie to the application response headers now.","130":"        $this-\u003EsaveSession($request);","131":"","132":"        return $response;","133":"    }","134":"","135":"    \/**"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Session\\Middleware\\StartSession.php","line_number":64,"method":"handle","class":"Illuminate\\Session\\Middleware\\StartSession","code_snippet":{"49":"     * @return mixed","50":"     *\/","51":"    public function handle($request, Closure $next)","52":"    {","53":"        if (! $this-\u003EsessionConfigured()) {","54":"            return $next($request);","55":"        }","56":"","57":"        $session = $this-\u003EgetSession($request);","58":"","59":"        if ($this-\u003Emanager-\u003EshouldBlock() ||","60":"            ($request-\u003Eroute() instanceof Route \u0026\u0026 $request-\u003Eroute()-\u003ElocksFor())) {","61":"            return $this-\u003EhandleRequestWhileBlocking($request, $session, $next);","62":"        }","63":"","64":"        return $this-\u003EhandleStatefulRequest($request, $session, $next);","65":"    }","66":"","67":"    \/**","68":"     * Handle the given request within session state.","69":"     *","70":"     * @param  \\Illuminate\\Http\\Request  $request","71":"     * @param  \\Illuminate\\Contracts\\Session\\Session  $session","72":"     * @param  \\Closure  $next","73":"     * @return mixed","74":"     *\/","75":"    protected function handleRequestWhileBlocking(Request $request, $session, Closure $next)","76":"    {","77":"        if (! $request-\u003Eroute() instanceof Route) {","78":"            return;"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"session","value":"object","original_type":"Illuminate\\Session\\Store","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse.php","line_number":37,"method":"handle","class":"Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse","code_snippet":{"17":"    \/**","18":"     * Create a new CookieQueue instance.","19":"     *","20":"     * @param  \\Illuminate\\Contracts\\Cookie\\QueueingFactory  $cookies","21":"     * @return void","22":"     *\/","23":"    public function __construct(CookieJar $cookies)","24":"    {","25":"        $this-\u003Ecookies = $cookies;","26":"    }","27":"","28":"    \/**","29":"     * Handle an incoming request.","30":"     *","31":"     * @param  \\Illuminate\\Http\\Request  $request","32":"     * @param  \\Closure  $next","33":"     * @return mixed","34":"     *\/","35":"    public function handle($request, Closure $next)","36":"    {","37":"        $response = $next($request);","38":"","39":"        foreach ($this-\u003Ecookies-\u003EgetQueuedCookies() as $cookie) {","40":"            $response-\u003Eheaders-\u003EsetCookie($cookie);","41":"        }","42":"","43":"        return $response;","44":"    }","45":"}","46":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Cookie\\Middleware\\EncryptCookies.php","line_number":67,"method":"handle","class":"Illuminate\\Cookie\\Middleware\\EncryptCookies","code_snippet":{"52":"     *\/","53":"    public function disableFor($name)","54":"    {","55":"        $this-\u003Eexcept = array_merge($this-\u003Eexcept, (array) $name);","56":"    }","57":"","58":"    \/**","59":"     * Handle an incoming request.","60":"     *","61":"     * @param  \\Illuminate\\Http\\Request  $request","62":"     * @param  \\Closure  $next","63":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","64":"     *\/","65":"    public function handle($request, Closure $next)","66":"    {","67":"        return $this-\u003Eencrypt($next($this-\u003Edecrypt($request)));","68":"    }","69":"","70":"    \/**","71":"     * Decrypt the cookies on the request.","72":"     *","73":"     * @param  \\Symfony\\Component\\HttpFoundation\\Request  $request","74":"     * @return \\Symfony\\Component\\HttpFoundation\\Request","75":"     *\/","76":"    protected function decrypt(Request $request)","77":"    {","78":"        foreach ($request-\u003Ecookies as $key =\u003E $cookie) {","79":"            if ($this-\u003EisDisabled($key)) {","80":"                continue;","81":"            }"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":119,"method":"then","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"104":"        return $this;","105":"    }","106":"","107":"    \/**","108":"     * Run the pipeline with a final destination callback.","109":"     *","110":"     * @param  \\Closure  $destination","111":"     * @return mixed","112":"     *\/","113":"    public function then(Closure $destination)","114":"    {","115":"        $pipeline = array_reduce(","116":"            array_reverse($this-\u003Epipes()), $this-\u003Ecarry(), $this-\u003EprepareDestination($destination)","117":"        );","118":"","119":"        return $pipeline($this-\u003Epassable);","120":"    }","121":"","122":"    \/**","123":"     * Run the pipeline and return the result.","124":"     *","125":"     * @return mixed","126":"     *\/","127":"    public function thenReturn()","128":"    {","129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":805,"method":"runRouteWithinStack","class":"Illuminate\\Routing\\Router","code_snippet":{"790":"     *","791":"     * @param  \\Illuminate\\Routing\\Route  $route","792":"     * @param  \\Illuminate\\Http\\Request  $request","793":"     * @return mixed","794":"     *\/","795":"    protected function runRouteWithinStack(Route $route, Request $request)","796":"    {","797":"        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026","798":"                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;","799":"","800":"        $middleware = $shouldSkipMiddleware ? [] : $this-\u003EgatherRouteMiddleware($route);","801":"","802":"        return (new Pipeline($this-\u003Econtainer))","803":"                        -\u003Esend($request)","804":"                        -\u003Ethrough($middleware)","805":"                        -\u003Ethen(fn ($request) =\u003E $this-\u003EprepareResponse(","806":"                            $request, $route-\u003Erun()","807":"                        ));","808":"    }","809":"","810":"    \/**","811":"     * Gather the middleware for the given route with resolved class names.","812":"     *","813":"     * @param  \\Illuminate\\Routing\\Route  $route","814":"     * @return array","815":"     *\/","816":"    public function gatherRouteMiddleware(Route $route)","817":"    {","818":"        return $this-\u003EresolveMiddleware($route-\u003EgatherMiddleware(), $route-\u003EexcludedMiddleware());","819":"    }"},"arguments":[{"name":"destination","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php:805-807","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":784,"method":"runRoute","class":"Illuminate\\Routing\\Router","code_snippet":{"769":"","770":"    \/**","771":"     * Return the response for the given route.","772":"     *","773":"     * @param  \\Illuminate\\Http\\Request  $request","774":"     * @param  \\Illuminate\\Routing\\Route  $route","775":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","776":"     *\/","777":"    protected function runRoute(Request $request, Route $route)","778":"    {","779":"        $request-\u003EsetRouteResolver(fn () =\u003E $route);","780":"","781":"        $this-\u003Eevents-\u003Edispatch(new RouteMatched($route, $request));","782":"","783":"        return $this-\u003EprepareResponse($request,","784":"            $this-\u003ErunRouteWithinStack($route, $request)","785":"        );","786":"    }","787":"","788":"    \/**","789":"     * Run the given route within a Stack \u0022onion\u0022 instance.","790":"     *","791":"     * @param  \\Illuminate\\Routing\\Route  $route","792":"     * @param  \\Illuminate\\Http\\Request  $request","793":"     * @return mixed","794":"     *\/","795":"    protected function runRouteWithinStack(Route $route, Request $request)","796":"    {","797":"        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026","798":"                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;"},"arguments":[{"name":"route","value":"object","original_type":"Illuminate\\Routing\\Route","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":748,"method":"dispatchToRoute","class":"Illuminate\\Routing\\Router","code_snippet":{"733":"    public function dispatch(Request $request)","734":"    {","735":"        $this-\u003EcurrentRequest = $request;","736":"","737":"        return $this-\u003EdispatchToRoute($request);","738":"    }","739":"","740":"    \/**","741":"     * Dispatch the request to a route and return the response.","742":"     *","743":"     * @param  \\Illuminate\\Http\\Request  $request","744":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","745":"     *\/","746":"    public function dispatchToRoute(Request $request)","747":"    {","748":"        return $this-\u003ErunRoute($request, $this-\u003EfindRoute($request));","749":"    }","750":"","751":"    \/**","752":"     * Find the route matching a given request.","753":"     *","754":"     * @param  \\Illuminate\\Http\\Request  $request","755":"     * @return \\Illuminate\\Routing\\Route","756":"     *\/","757":"    protected function findRoute($request)","758":"    {","759":"        $this-\u003Eevents-\u003Edispatch(new Routing($request));","760":"","761":"        $this-\u003Ecurrent = $route = $this-\u003Eroutes-\u003Ematch($request);","762":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"route","value":"object","original_type":"Illuminate\\Routing\\Route","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":737,"method":"dispatch","class":"Illuminate\\Routing\\Router","code_snippet":{"722":"        $route = tap($this-\u003Eroutes-\u003EgetByName($name))-\u003Ebind($this-\u003EcurrentRequest);","723":"","724":"        return $this-\u003ErunRoute($this-\u003EcurrentRequest, $route);","725":"    }","726":"","727":"    \/**","728":"     * Dispatch the request to the application.","729":"     *","730":"     * @param  \\Illuminate\\Http\\Request  $request","731":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","732":"     *\/","733":"    public function dispatch(Request $request)","734":"    {","735":"        $this-\u003EcurrentRequest = $request;","736":"","737":"        return $this-\u003EdispatchToRoute($request);","738":"    }","739":"","740":"    \/**","741":"     * Dispatch the request to a route and return the response.","742":"     *","743":"     * @param  \\Illuminate\\Http\\Request  $request","744":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","745":"     *\/","746":"    public function dispatchToRoute(Request $request)","747":"    {","748":"        return $this-\u003ErunRoute($request, $this-\u003EfindRoute($request));","749":"    }","750":"","751":"    \/**"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php","line_number":200,"method":"Illuminate\\Foundation\\Http\\{closure}","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"185":"        if (! $this-\u003Eapp-\u003EhasBeenBootstrapped()) {","186":"            $this-\u003Eapp-\u003EbootstrapWith($this-\u003Ebootstrappers());","187":"        }","188":"    }","189":"","190":"    \/**","191":"     * Get the route dispatcher callback.","192":"     *","193":"     * @return \\Closure","194":"     *\/","195":"    protected function dispatchToRouter()","196":"    {","197":"        return function ($request) {","198":"            $this-\u003Eapp-\u003Einstance(\u0027request\u0027, $request);","199":"","200":"            return $this-\u003Erouter-\u003Edispatch($request);","201":"        };","202":"    }","203":"","204":"    \/**","205":"     * Call the terminate method on any terminable middleware.","206":"     *","207":"     * @param  \\Illuminate\\Http\\Request  $request","208":"     * @param  \\Illuminate\\Http\\Response  $response","209":"     * @return void","210":"     *\/","211":"    public function terminate($request, $response)","212":"    {","213":"        $this-\u003EterminateMiddleware($request, $response);","214":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":144,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":"","134":"    \/**","135":"     * Get the final piece of the Closure onion.","136":"     *","137":"     * @param  \\Closure  $destination","138":"     * @return \\Closure","139":"     *\/","140":"    protected function prepareDestination(Closure $destination)","141":"    {","142":"        return function ($passable) use ($destination) {","143":"            try {","144":"                return $destination($passable);","145":"            } catch (Throwable $e) {","146":"                return $this-\u003EhandleException($passable, $e);","147":"            }","148":"        };","149":"    }","150":"","151":"    \/**","152":"     * Get a Closure that represents a slice of the application onion.","153":"     *","154":"     * @return \\Closure","155":"     *\/","156":"    protected function carry()","157":"    {","158":"        return function ($stack, $pipe) {"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest.php","line_number":21,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest","code_snippet":{"6":"use Symfony\\Component\\HttpFoundation\\ParameterBag;","7":"","8":"class TransformsRequest","9":"{","10":"    \/**","11":"     * Handle an incoming request.","12":"     *","13":"     * @param  \\Illuminate\\Http\\Request  $request","14":"     * @param  \\Closure  $next","15":"     * @return mixed","16":"     *\/","17":"    public function handle($request, Closure $next)","18":"    {","19":"        $this-\u003Eclean($request);","20":"","21":"        return $next($request);","22":"    }","23":"","24":"    \/**","25":"     * Clean the request\u0027s data.","26":"     *","27":"     * @param  \\Illuminate\\Http\\Request  $request","28":"     * @return void","29":"     *\/","30":"    protected function clean($request)","31":"    {","32":"        $this-\u003EcleanParameterBag($request-\u003Equery);","33":"","34":"        if ($request-\u003EisJson()) {","35":"            $this-\u003EcleanParameterBag($request-\u003Ejson());"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull.php","line_number":31,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull","code_snippet":{"16":"    \/**","17":"     * Handle an incoming request.","18":"     *","19":"     * @param  \\Illuminate\\Http\\Request  $request","20":"     * @param  \\Closure  $next","21":"     * @return mixed","22":"     *\/","23":"    public function handle($request, Closure $next)","24":"    {","25":"        foreach (static::$skipCallbacks as $callback) {","26":"            if ($callback($request)) {","27":"                return $next($request);","28":"            }","29":"        }","30":"","31":"        return parent::handle($request, $next);","32":"    }","33":"","34":"    \/**","35":"     * Transform the given value.","36":"     *","37":"     * @param  string  $key","38":"     * @param  mixed  $value","39":"     * @return mixed","40":"     *\/","41":"    protected function transform($key, $value)","42":"    {","43":"        return $value === \u0027\u0027 ? null : $value;","44":"    }","45":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:142-148","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:142-148","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest.php","line_number":21,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest","code_snippet":{"6":"use Symfony\\Component\\HttpFoundation\\ParameterBag;","7":"","8":"class TransformsRequest","9":"{","10":"    \/**","11":"     * Handle an incoming request.","12":"     *","13":"     * @param  \\Illuminate\\Http\\Request  $request","14":"     * @param  \\Closure  $next","15":"     * @return mixed","16":"     *\/","17":"    public function handle($request, Closure $next)","18":"    {","19":"        $this-\u003Eclean($request);","20":"","21":"        return $next($request);","22":"    }","23":"","24":"    \/**","25":"     * Clean the request\u0027s data.","26":"     *","27":"     * @param  \\Illuminate\\Http\\Request  $request","28":"     * @return void","29":"     *\/","30":"    protected function clean($request)","31":"    {","32":"        $this-\u003EcleanParameterBag($request-\u003Equery);","33":"","34":"        if ($request-\u003EisJson()) {","35":"            $this-\u003EcleanParameterBag($request-\u003Ejson());"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\TrimStrings.php","line_number":40,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TrimStrings","code_snippet":{"25":"    \/**","26":"     * Handle an incoming request.","27":"     *","28":"     * @param  \\Illuminate\\Http\\Request  $request","29":"     * @param  \\Closure  $next","30":"     * @return mixed","31":"     *\/","32":"    public function handle($request, Closure $next)","33":"    {","34":"        foreach (static::$skipCallbacks as $callback) {","35":"            if ($callback($request)) {","36":"                return $next($request);","37":"            }","38":"        }","39":"","40":"        return parent::handle($request, $next);","41":"    }","42":"","43":"    \/**","44":"     * Transform the given value.","45":"     *","46":"     * @param  string  $key","47":"     * @param  mixed  $value","48":"     * @return mixed","49":"     *\/","50":"    protected function transform($key, $value)","51":"    {","52":"        if (in_array($key, $this-\u003Eexcept, true) || ! is_string($value)) {","53":"            return $value;","54":"        }"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize.php","line_number":27,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize","code_snippet":{"12":"     *","13":"     * @param  \\Illuminate\\Http\\Request  $request","14":"     * @param  \\Closure  $next","15":"     * @return mixed","16":"     *","17":"     * @throws \\Illuminate\\Http\\Exceptions\\PostTooLargeException","18":"     *\/","19":"    public function handle($request, Closure $next)","20":"    {","21":"        $max = $this-\u003EgetPostMaxSize();","22":"","23":"        if ($max \u003E 0 \u0026\u0026 $request-\u003Eserver(\u0027CONTENT_LENGTH\u0027) \u003E $max) {","24":"            throw new PostTooLargeException;","25":"        }","26":"","27":"        return $next($request);","28":"    }","29":"","30":"    \/**","31":"     * Determine the server \u0027post_max_size\u0027 as bytes.","32":"     *","33":"     * @return int","34":"     *\/","35":"    protected function getPostMaxSize()","36":"    {","37":"        if (is_numeric($postMaxSize = ini_get(\u0027post_max_size\u0027))) {","38":"            return (int) $postMaxSize;","39":"        }","40":"","41":"        $metric = strtoupper(substr($postMaxSize, -1));"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance.php","line_number":99,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance","code_snippet":{"84":"                return response(","85":"                    $data[\u0027template\u0027],","86":"                    $data[\u0027status\u0027] ?? 503,","87":"                    $this-\u003EgetHeaders($data)","88":"                );","89":"            }","90":"","91":"            throw new HttpException(","92":"                $data[\u0027status\u0027] ?? 503,","93":"                \u0027Service Unavailable\u0027,","94":"                null,","95":"                $this-\u003EgetHeaders($data)","96":"            );","97":"        }","98":"","99":"        return $next($request);","100":"    }","101":"","102":"    \/**","103":"     * Determine if the incoming request has a maintenance mode bypass cookie.","104":"     *","105":"     * @param  \\Illuminate\\Http\\Request  $request","106":"     * @param  array  $data","107":"     * @return bool","108":"     *\/","109":"    protected function hasValidBypassCookie($request, array $data)","110":"    {","111":"        return isset($data[\u0027secret\u0027]) \u0026\u0026","112":"                $request-\u003Ecookie(\u0027laravel_maintenance\u0027) \u0026\u0026","113":"                MaintenanceModeBypassCookie::isValid("},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Http\\Middleware\\HandleCors.php","line_number":49,"method":"handle","class":"Illuminate\\Http\\Middleware\\HandleCors","code_snippet":{"34":"    {","35":"        $this-\u003Econtainer = $container;","36":"        $this-\u003Ecors = $cors;","37":"    }","38":"","39":"    \/**","40":"     * Handle the incoming request.","41":"     *","42":"     * @param  \\Illuminate\\Http\\Request  $request","43":"     * @param  \\Closure  $next","44":"     * @return \\Illuminate\\Http\\Response","45":"     *\/","46":"    public function handle($request, Closure $next)","47":"    {","48":"        if (! $this-\u003EhasMatchingPath($request)) {","49":"            return $next($request);","50":"        }","51":"","52":"        $this-\u003Ecors-\u003EsetOptions($this-\u003Econtainer[\u0027config\u0027]-\u003Eget(\u0027cors\u0027, []));","53":"","54":"        if ($this-\u003Ecors-\u003EisPreflightRequest($request)) {","55":"            $response = $this-\u003Ecors-\u003EhandlePreflightRequest($request);","56":"","57":"            $this-\u003Ecors-\u003EvaryHeader($response, \u0027Access-Control-Request-Method\u0027);","58":"","59":"            return $response;","60":"        }","61":"","62":"        $response = $next($request);","63":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Http\\Middleware\\TrustProxies.php","line_number":39,"method":"handle","class":"Illuminate\\Http\\Middleware\\TrustProxies","code_snippet":{"24":"    \/**","25":"     * Handle an incoming request.","26":"     *","27":"     * @param  \\Illuminate\\Http\\Request  $request","28":"     * @param  \\Closure  $next","29":"     * @return mixed","30":"     *","31":"     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException","32":"     *\/","33":"    public function handle(Request $request, Closure $next)","34":"    {","35":"        $request::setTrustedProxies([], $this-\u003EgetTrustedHeaderNames());","36":"","37":"        $this-\u003EsetTrustedProxyIpAddresses($request);","38":"","39":"        return $next($request);","40":"    }","41":"","42":"    \/**","43":"     * Sets the trusted proxies on the request.","44":"     *","45":"     * @param  \\Illuminate\\Http\\Request  $request","46":"     * @return void","47":"     *\/","48":"    protected function setTrustedProxyIpAddresses(Request $request)","49":"    {","50":"        $trustedIps = $this-\u003Eproxies() ?: config(\u0027trustedproxy.proxies\u0027);","51":"","52":"        if ($trustedIps === \u0027*\u0027 || $trustedIps === \u0027**\u0027) {","53":"            return $this-\u003EsetTrustedProxyIpAddressesToTheCallingIp($request);"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":119,"method":"then","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"104":"        return $this;","105":"    }","106":"","107":"    \/**","108":"     * Run the pipeline with a final destination callback.","109":"     *","110":"     * @param  \\Closure  $destination","111":"     * @return mixed","112":"     *\/","113":"    public function then(Closure $destination)","114":"    {","115":"        $pipeline = array_reduce(","116":"            array_reverse($this-\u003Epipes()), $this-\u003Ecarry(), $this-\u003EprepareDestination($destination)","117":"        );","118":"","119":"        return $pipeline($this-\u003Epassable);","120":"    }","121":"","122":"    \/**","123":"     * Run the pipeline and return the result.","124":"     *","125":"     * @return mixed","126":"     *\/","127":"    public function thenReturn()","128":"    {","129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php","line_number":175,"method":"sendRequestThroughRouter","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"160":"     *","161":"     * @param  \\Illuminate\\Http\\Request  $request","162":"     * @return \\Illuminate\\Http\\Response","163":"     *\/","164":"    protected function sendRequestThroughRouter($request)","165":"    {","166":"        $this-\u003Eapp-\u003Einstance(\u0027request\u0027, $request);","167":"","168":"        Facade::clearResolvedInstance(\u0027request\u0027);","169":"","170":"        $this-\u003Ebootstrap();","171":"","172":"        return (new Pipeline($this-\u003Eapp))","173":"                    -\u003Esend($request)","174":"                    -\u003Ethrough($this-\u003Eapp-\u003EshouldSkipMiddleware() ? [] : $this-\u003Emiddleware)","175":"                    -\u003Ethen($this-\u003EdispatchToRouter());","176":"    }","177":"","178":"    \/**","179":"     * Bootstrap the application for HTTP requests.","180":"     *","181":"     * @return void","182":"     *\/","183":"    public function bootstrap()","184":"    {","185":"        if (! $this-\u003Eapp-\u003EhasBeenBootstrapped()) {","186":"            $this-\u003Eapp-\u003EbootstrapWith($this-\u003Ebootstrappers());","187":"        }","188":"    }","189":""},"arguments":[{"name":"destination","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php:197-201","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php","line_number":144,"method":"handle","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"129":"    }","130":"","131":"    \/**","132":"     * Handle an incoming HTTP request.","133":"     *","134":"     * @param  \\Illuminate\\Http\\Request  $request","135":"     * @return \\Illuminate\\Http\\Response","136":"     *\/","137":"    public function handle($request)","138":"    {","139":"        $this-\u003ErequestStartedAt = Carbon::now();","140":"","141":"        try {","142":"            $request-\u003EenableHttpMethodParameterOverride();","143":"","144":"            $response = $this-\u003EsendRequestThroughRouter($request);","145":"        } catch (Throwable $e) {","146":"            $this-\u003EreportException($e);","147":"","148":"            $response = $this-\u003ErenderException($request, $e);","149":"        }","150":"","151":"        $this-\u003Eapp[\u0027events\u0027]-\u003Edispatch(","152":"            new RequestHandled($request, $response)","153":"        );","154":"","155":"        return $response;","156":"    }","157":"","158":"    \/**"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\public\\index.php","line_number":51,"method":"require_once","class":null,"code_snippet":{"27":"|","28":"| Composer provides a convenient, automatically generated class loader for","29":"| this application. We just need to utilize it! We\u0027ll simply require it","30":"| into the script here so we don\u0027t need to manually load our classes.","31":"|","32":"*\/","33":"","34":"require __DIR__.\u0027\/..\/vendor\/autoload.php\u0027;","35":"","36":"\/*","37":"|--------------------------------------------------------------------------","38":"| Run The Application","39":"|--------------------------------------------------------------------------","40":"|","41":"| Once we have the application, we can handle the incoming request using","42":"| the application\u0027s HTTP kernel. Then, we will send the response back","43":"| to this client\u0027s browser, allowing them to enjoy our application.","44":"|","45":"*\/","46":"","47":"$app = require_once __DIR__.\u0027\/..\/bootstrap\/app.php\u0027;","48":"","49":"$kernel = $app-\u003Emake(Kernel::class);","50":"","51":"$response = $kernel-\u003Ehandle(","52":"    $request = Request::capture()","53":")-\u003Esend();","54":"","55":"$kernel-\u003Eterminate($request, $response);","56":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":true},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\resources\\server.php","line_number":16,"method":"[top]","class":null,"code_snippet":{"1":"\u003C?php","2":"","3":"$publicPath = getcwd();","4":"","5":"$uri = urldecode(","6":"    parse_url($_SERVER[\u0027REQUEST_URI\u0027], PHP_URL_PATH) ?? \u0027\u0027","7":");","8":"","9":"\/\/ This file allows us to emulate Apache\u0027s \u0022mod_rewrite\u0022 functionality from the","10":"\/\/ built-in PHP web server. This provides a convenient way to test a Laravel","11":"\/\/ application without having installed a \u0022real\u0022 web server software here.","12":"if ($uri !== \u0027\/\u0027 \u0026\u0026 file_exists($publicPath.$uri)) {","13":"    return false;","14":"}","15":"","16":"require_once $publicPath.\u0027\/index.php\u0027;","17":""},"arguments":[],"application_frame":false}],"context":{"request":{"url":"http:\/\/localhost:8000\/test","ip":null,"method":"GET","useragent":"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/119.0.0.0 Safari\/537.36 OPR\/105.0.0.0"},"request_data":{"queryString":[],"body":[],"files":[]},"headers":{"host":"localhost:8000","connection":"keep-alive","sec-ch-ua":"\u0022Opera GX\u0022;v=\u0022105\u0022, \u0022Chromium\u0022;v=\u0022119\u0022, \u0022Not?A_Brand\u0022;v=\u002224\u0022","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\u0022Windows\u0022","upgrade-insecure-requests":"1","user-agent":"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/119.0.0.0 Safari\/537.36 OPR\/105.0.0.0","accept":"text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/avif,image\/webp,image\/apng,*\/*;q=0.8,application\/signed-exchange;v=b3;q=0.7","sec-fetch-site":"none","sec-fetch-mode":"navigate","sec-fetch-user":"?1","sec-fetch-dest":"document","accept-encoding":"gzip, deflate, br","accept-language":"ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7","cookie":"_ga=GA1.1.846799490.1703169721; PHPSESSID=aggn7aha12v9gt1km8304shd11; __stripe_mid=1c580144-1ffc-4816-8a65-bd1008e478b1f2e851; _fbp=fb.0.1703502851056.1149035756; _ga_J15438RNF9=GS1.1.1703685261.4.1.1703685393.0.0.0; transition_admin_id=eyJpdiI6InVtRjhmMkxxZUlPWXI4ckxzNEZaeGc9PSIsInZhbHVlIjoiZ3djM1ZZRG12eDUraG8vaWMzRCtEaWdSdklaamhrbkRjWTZYZCtDZlpMMHBlZ0tIQ0t5STA4QTU1elRKVkREdSIsIm1hYyI6ImU5ZTFjOWEwNjAzNzZkODAxMTZlNzZhMDQ2MDBkZDAwZjY3NTFmZjBjODIwNjVlNmQ1ODQ5ZGY3NzJjZTUxMDkiLCJ0YWciOiIifQ%3D%3D; transition_id_71=eyJpdiI6InNUeFNCOEwzazd5bTdMVDIzS2NVQ0E9PSIsInZhbHVlIjoic2tGK3VTTmFMWXdEUXlHTmdtNmN3dnN5d2FMbVoybEZqVGFnVzBVQ2l6VHQ1VTdWTFRibU9JZzFEVTk4cUFLVyIsIm1hYyI6IjNkNWY3YzNhMDUxM2ZmYzBmMGNmZTlhNmMxMGQ2ODgyZTExMjA0ZTI2OGVlODIwZmY1OWYwMWU1OTcwYTM0NjciLCJ0YWciOiIifQ%3D%3D; transition_name_71=eyJpdiI6InBreE9Ha1JRQzU5N0k2QzZNTGU4blE9PSIsInZhbHVlIjoiUDBxOVQrRTdPTXJLcGx0cFVkakxNc3orZHpic3NXL2wrMExkeUovMUJLTHBzZ3ExSjdVSENVZ2hTeU9tSVU0YWIxMUFrcmlOTXFpc3ZYN1dzc2dDU2c9PSIsIm1hYyI6Ijg5NWMyNzViZThlODY4YjYxOTE1ODI5OWUzZTQyZGIyMGFkZWYxMmZhN2YwMWQ5OGNiMjE3YjFlMDQ1MWYxOWMiLCJ0YWciOiIifQ%3D%3D; _ga_R5ZKQ7648B=GS1.1.1704575053.12.0.1704575053.0.0.0; _ga_XHT8HB4P96=GS1.1.1704575053.12.0.1704575053.60.0.0; transition_id_183=eyJpdiI6ImNSeW1UWkhWbHMxV1lPQ3kvYmdUTVE9PSIsInZhbHVlIjoiNlcxdHdJV1ZoS09yNHZBT2tJR3VSK0RCSzV5SGg3ZzVhaGVPVndYcWNMWk9weVlmZC8wc3ZRRFB5UVFETXVOViIsIm1hYyI6IjU3MWZlMGEyNzRjY2UyNmVkOWNmZGJkMWE4ZWM5YmNlNjc3NGQ3NDllNjBiOWRhMzY2NGEwNTAxMDZiYzJhM2YiLCJ0YWciOiIifQ%3D%3D; transition_name_183=eyJpdiI6ImhSbGJZSXdFWWFPRWMwaDlJUjFTZFE9PSIsInZhbHVlIjoibnRIN2hEajIvR2V6c3dnZzM1cEFzaEdHaWlsak9HbWxUeTV2L3l2eHFrbTFyUXBzSk1BNFl4MHdiYks2RGNlWDF0YzBjUjJTYkg5aUxqRSs0VnNyelE9PSIsIm1hYyI6ImY5NTUyMmRkM2RjMjUxY2I3YmFhOGUxZGFiODBjYTMxZjUxZGVkZGIyNDdiNWQ5Y2U3Njg5ODQ5ZmJkN2U4NGQiLCJ0YWciOiIifQ%3D%3D; XSRF-TOKEN=eyJpdiI6Img3aHlJQWM2bDFvaVVUTUh1V0pRcGc9PSIsInZhbHVlIjoiODlMaEpvVWJEcG8wZUQvTzRhL240UVROZHN3SGwrKzBvOFZGb2w1L05YRDZZTzFxZ1FzbWNiVWJacVUzNFJNL0tLSGJwT1ZIc0gzZDFUaW5OWXZpWnJ3WWJuaThVNmlENmVtNzJFSzdTWFpyQi9WdTE3ZmZVNmdPT0I3azdZYlAiLCJtYWMiOiI5NTkzNThkNDQxZjBhYWJlYjA1YTNjMGJiZmE2YjFkM2YwNDQ4YTY5YzdiMzNiMDNiMTQ1NzRjODQyNWFjMDk1IiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IndEczAwbGRiWE5QS0RwaGFKSFRDMkE9PSIsInZhbHVlIjoiQkJpVE9jZjFHQXRjazNKcDg4M1RqdmdxRUpndEVJVkdRdTZHVm9DTm1KZ0kyS205a2xIRFFEVWMyemwvdlBRQkU0UXpXSlpla3AvRkVqUDlUdWVhLzQ3c2ZIR1VGdHFGUXE3Y1E3WWJUUU56Qk1iWlhLamt6Y1hDSGMyMkVaL04iLCJtYWMiOiI2MTIzZGYyNWI5N2M5N2YyODM1ZGQ4MTdjMDc2ZjdkYzMwNjFlMGY4ZmNmNTlmMTUzYjBmMzdmMGFhYmJjZGEzIiwidGFnIjoiIn0%3D"},"cookies":{"_ga":null,"PHPSESSID":null,"__stripe_mid":null,"_fbp":null,"_ga_J15438RNF9":null,"transition_admin_id":null,"transition_id_71":null,"transition_name_71":null,"_ga_R5ZKQ7648B":null,"_ga_XHT8HB4P96":null,"transition_id_183":null,"transition_name_183":null,"XSRF-TOKEN":"e82gUK9uIWvigk5scf6PwBwoB2KwY9mGjmzxXSzF","laravel_session":"UbqjYq2L2FrQKZnMgMKTz52JrnipRQqtmKxROkAV"},"session":{"_previous":{"url":"http:\/\/localhost:8000\/get_content\/2"},"_flash":{"old":[],"new":[]},"_token":"e82gUK9uIWvigk5scf6PwBwoB2KwY9mGjmzxXSzF","url":[],"login_moonshine_59ba36addc2b2f9401580f014c7f58ea4e30989d":1,"password_hash_moonshine":"$2y$12$fRWxRrZw4aYHAVtX6kq7fO87E1SoA5XlVw3t4.y9ZN.Sdwb31Z0fW"},"route":{"route":null,"routeParameters":[],"controllerAction":"App\\Http\\Controllers\\TestController@index","middleware":["web"]},"env":{"php_version":"8.2.0","laravel_version":"10.40.0","laravel_locale":"en","laravel_config_cached":false,"app_debug":true,"app_env":"local"},"dumps":[],"logs":[],"queries":[]},"stage":"local","message_level":null,"open_frame_index":null,"application_path":"D:\\Projects\\my-projects\\peta-log","application_version":null,"tracking_uuid":"19439ff3-7d6e-4cc3-a85b-406fbc7a87c1"},"shareableReport":{"notifier":"Laravel Client","language":"PHP","framework_version":"10.40.0","language_version":"8.2.0","exception_class":"ErrorException","seen_at":1705062361,"message":"Undefined array key 100","glows":[],"solutions":[],"documentation_links":[],"stacktrace":[{"file":"D:\\Projects\\my-projects\\peta-log\\app\\Http\\Controllers\\TestController.php","line_number":11,"method":"index","class":"App\\Http\\Controllers\\TestController","code_snippet":{"1":"\u003C?php","2":"","3":"namespace App\\Http\\Controllers;","4":"","5":"use Illuminate\\Http\\Request;","6":"","7":"class TestController extends Controller","8":"{","9":"    public function index(){","10":"        $array = [];","11":"        echo $array[100];","12":"    }","13":"","14":"}","15":""},"arguments":null,"application_frame":true},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Controller.php","line_number":54,"method":"callAction","class":"Illuminate\\Routing\\Controller","code_snippet":{"39":"     *\/","40":"    public function getMiddleware()","41":"    {","42":"        return $this-\u003Emiddleware;","43":"    }","44":"","45":"    \/**","46":"     * Execute an action on the controller.","47":"     *","48":"     * @param  string  $method","49":"     * @param  array  $parameters","50":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","51":"     *\/","52":"    public function callAction($method, $parameters)","53":"    {","54":"        return $this-\u003E{$method}(...array_values($parameters));","55":"    }","56":"","57":"    \/**","58":"     * Handle calls to missing methods on the controller.","59":"     *","60":"     * @param  string  $method","61":"     * @param  array  $parameters","62":"     * @return mixed","63":"     *","64":"     * @throws \\BadMethodCallException","65":"     *\/","66":"    public function __call($method, $parameters)","67":"    {","68":"        throw new BadMethodCallException(sprintf("},"arguments":[],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\ControllerDispatcher.php","line_number":43,"method":"dispatch","class":"Illuminate\\Routing\\ControllerDispatcher","code_snippet":{"28":"    }","29":"","30":"    \/**","31":"     * Dispatch a request to a given controller and method.","32":"     *","33":"     * @param  \\Illuminate\\Routing\\Route  $route","34":"     * @param  mixed  $controller","35":"     * @param  string  $method","36":"     * @return mixed","37":"     *\/","38":"    public function dispatch(Route $route, $controller, $method)","39":"    {","40":"        $parameters = $this-\u003EresolveParameters($route, $controller, $method);","41":"","42":"        if (method_exists($controller, \u0027callAction\u0027)) {","43":"            return $controller-\u003EcallAction($method, $parameters);","44":"        }","45":"","46":"        return $controller-\u003E{$method}(...array_values($parameters));","47":"    }","48":"","49":"    \/**","50":"     * Resolve the parameters for the controller.","51":"     *","52":"     * @param  \\Illuminate\\Routing\\Route  $route","53":"     * @param  mixed  $controller","54":"     * @param  string  $method","55":"     * @return array","56":"     *\/","57":"    protected function resolveParameters(Route $route, $controller, $method)"},"arguments":[{"name":"method","value":"index","original_type":"string","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"parameters","value":[],"original_type":"array","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Route.php","line_number":259,"method":"runController","class":"Illuminate\\Routing\\Route","code_snippet":{"244":"     *\/","245":"    protected function isSerializedClosure()","246":"    {","247":"        return RouteAction::containsSerializedClosure($this-\u003Eaction);","248":"    }","249":"","250":"    \/**","251":"     * Run the route action and return the response.","252":"     *","253":"     * @return mixed","254":"     *","255":"     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException","256":"     *\/","257":"    protected function runController()","258":"    {","259":"        return $this-\u003EcontrollerDispatcher()-\u003Edispatch(","260":"            $this, $this-\u003EgetController(), $this-\u003EgetControllerMethod()","261":"        );","262":"    }","263":"","264":"    \/**","265":"     * Get the controller instance for the route.","266":"     *","267":"     * @return mixed","268":"     *\/","269":"    public function getController()","270":"    {","271":"        if (! $this-\u003EisControllerAction()) {","272":"            return null;","273":"        }"},"arguments":[{"name":"route","value":"object","original_type":"Illuminate\\Routing\\Route","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"controller","value":"object","original_type":"App\\Http\\Controllers\\TestController","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"method","value":"index","original_type":"string","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Route.php","line_number":205,"method":"run","class":"Illuminate\\Routing\\Route","code_snippet":{"190":"    {","191":"        return RouteAction::parse($this-\u003Euri, $action);","192":"    }","193":"","194":"    \/**","195":"     * Run the route action and return the response.","196":"     *","197":"     * @return mixed","198":"     *\/","199":"    public function run()","200":"    {","201":"        $this-\u003Econtainer = $this-\u003Econtainer ?: new Container;","202":"","203":"        try {","204":"            if ($this-\u003EisControllerAction()) {","205":"                return $this-\u003ErunController();","206":"            }","207":"","208":"            return $this-\u003ErunCallable();","209":"        } catch (HttpResponseException $e) {","210":"            return $e-\u003EgetResponse();","211":"        }","212":"    }","213":"","214":"    \/**","215":"     * Checks whether the route\u0027s action is a controller.","216":"     *","217":"     * @return bool","218":"     *\/","219":"    protected function isControllerAction()"},"arguments":[],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":806,"method":"Illuminate\\Routing\\{closure}","class":"Illuminate\\Routing\\Router","code_snippet":{"791":"     * @param  \\Illuminate\\Routing\\Route  $route","792":"     * @param  \\Illuminate\\Http\\Request  $request","793":"     * @return mixed","794":"     *\/","795":"    protected function runRouteWithinStack(Route $route, Request $request)","796":"    {","797":"        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026","798":"                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;","799":"","800":"        $middleware = $shouldSkipMiddleware ? [] : $this-\u003EgatherRouteMiddleware($route);","801":"","802":"        return (new Pipeline($this-\u003Econtainer))","803":"                        -\u003Esend($request)","804":"                        -\u003Ethrough($middleware)","805":"                        -\u003Ethen(fn ($request) =\u003E $this-\u003EprepareResponse(","806":"                            $request, $route-\u003Erun()","807":"                        ));","808":"    }","809":"","810":"    \/**","811":"     * Gather the middleware for the given route with resolved class names.","812":"     *","813":"     * @param  \\Illuminate\\Routing\\Route  $route","814":"     * @return array","815":"     *\/","816":"    public function gatherRouteMiddleware(Route $route)","817":"    {","818":"        return $this-\u003EresolveMiddleware($route-\u003EgatherMiddleware(), $route-\u003EexcludedMiddleware());","819":"    }","820":""},"arguments":[],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":144,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":"","134":"    \/**","135":"     * Get the final piece of the Closure onion.","136":"     *","137":"     * @param  \\Closure  $destination","138":"     * @return \\Closure","139":"     *\/","140":"    protected function prepareDestination(Closure $destination)","141":"    {","142":"        return function ($passable) use ($destination) {","143":"            try {","144":"                return $destination($passable);","145":"            } catch (Throwable $e) {","146":"                return $this-\u003EhandleException($passable, $e);","147":"            }","148":"        };","149":"    }","150":"","151":"    \/**","152":"     * Get a Closure that represents a slice of the application onion.","153":"     *","154":"     * @return \\Closure","155":"     *\/","156":"    protected function carry()","157":"    {","158":"        return function ($stack, $pipe) {"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Middleware\\SubstituteBindings.php","line_number":50,"method":"handle","class":"Illuminate\\Routing\\Middleware\\SubstituteBindings","code_snippet":{"24":"    public function __construct(Registrar $router)","25":"    {","26":"        $this-\u003Erouter = $router;","27":"    }","28":"","29":"    \/**","30":"     * Handle an incoming request.","31":"     *","32":"     * @param  \\Illuminate\\Http\\Request  $request","33":"     * @param  \\Closure  $next","34":"     * @return mixed","35":"     *\/","36":"    public function handle($request, Closure $next)","37":"    {","38":"        try {","39":"            $this-\u003Erouter-\u003EsubstituteBindings($route = $request-\u003Eroute());","40":"","41":"            $this-\u003Erouter-\u003EsubstituteImplicitBindings($route);","42":"        } catch (ModelNotFoundException $exception) {","43":"            if ($route-\u003EgetMissing()) {","44":"                return $route-\u003EgetMissing()($request, $exception);","45":"            }","46":"","47":"            throw $exception;","48":"        }","49":"","50":"        return $next($request);","51":"    }","52":"}","53":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:142-148","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken.php","line_number":78,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken","code_snippet":{"63":"     *","64":"     * @param  \\Illuminate\\Http\\Request  $request","65":"     * @param  \\Closure  $next","66":"     * @return mixed","67":"     *","68":"     * @throws \\Illuminate\\Session\\TokenMismatchException","69":"     *\/","70":"    public function handle($request, Closure $next)","71":"    {","72":"        if (","73":"            $this-\u003EisReading($request) ||","74":"            $this-\u003ErunningUnitTests() ||","75":"            $this-\u003EinExceptArray($request) ||","76":"            $this-\u003EtokensMatch($request)","77":"        ) {","78":"            return tap($next($request), function ($response) use ($request) {","79":"                if ($this-\u003EshouldAddXsrfTokenCookie()) {","80":"                    $this-\u003EaddCookieToResponse($request, $response);","81":"                }","82":"            });","83":"        }","84":"","85":"        throw new TokenMismatchException(\u0027CSRF token mismatch.\u0027);","86":"    }","87":"","88":"    \/**","89":"     * Determine if the HTTP request uses a \u2018read\u2019 verb.","90":"     *","91":"     * @param  \\Illuminate\\Http\\Request  $request","92":"     * @return bool"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\View\\Middleware\\ShareErrorsFromSession.php","line_number":49,"method":"handle","class":"Illuminate\\View\\Middleware\\ShareErrorsFromSession","code_snippet":{"23":"     *\/","24":"    public function __construct(ViewFactory $view)","25":"    {","26":"        $this-\u003Eview = $view;","27":"    }","28":"","29":"    \/**","30":"     * Handle an incoming request.","31":"     *","32":"     * @param  \\Illuminate\\Http\\Request  $request","33":"     * @param  \\Closure  $next","34":"     * @return mixed","35":"     *\/","36":"    public function handle($request, Closure $next)","37":"    {","38":"        \/\/ If the current session has an \u0022errors\u0022 variable bound to it, we will share","39":"        \/\/ its value with all view instances so the views can easily access errors","40":"        \/\/ without having to bind. An empty bag is set when there aren\u0027t errors.","41":"        $this-\u003Eview-\u003Eshare(","42":"            \u0027errors\u0027, $request-\u003Esession()-\u003Eget(\u0027errors\u0027) ?: new ViewErrorBag","43":"        );","44":"","45":"        \/\/ Putting the errors in the view for every view allows the developer to just","46":"        \/\/ assume that some errors are always available, which is convenient since","47":"        \/\/ they don\u0027t have to continually run checks for the presence of errors.","48":"","49":"        return $next($request);","50":"    }","51":"}","52":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Session\\Middleware\\StartSession.php","line_number":121,"method":"handleStatefulRequest","class":"Illuminate\\Session\\Middleware\\StartSession","code_snippet":{"106":"     * @param  \\Illuminate\\Contracts\\Session\\Session  $session","107":"     * @param  \\Closure  $next","108":"     * @return mixed","109":"     *\/","110":"    protected function handleStatefulRequest(Request $request, $session, Closure $next)","111":"    {","112":"        \/\/ If a session driver has been configured, we will need to start the session here","113":"        \/\/ so that the data is ready for an application. Note that the Laravel sessions","114":"        \/\/ do not make use of PHP \u0022native\u0022 sessions in any way since they are crappy.","115":"        $request-\u003EsetLaravelSession(","116":"            $this-\u003EstartSession($request, $session)","117":"        );","118":"","119":"        $this-\u003EcollectGarbage($session);","120":"","121":"        $response = $next($request);","122":"","123":"        $this-\u003EstoreCurrentUrl($request, $session);","124":"","125":"        $this-\u003EaddCookieToResponse($response, $session);","126":"","127":"        \/\/ Again, if the session has been configured we will need to close out the session","128":"        \/\/ so that the attributes may be persisted to some storage medium. We will also","129":"        \/\/ add the session identifier cookie to the application response headers now.","130":"        $this-\u003EsaveSession($request);","131":"","132":"        return $response;","133":"    }","134":"","135":"    \/**"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Session\\Middleware\\StartSession.php","line_number":64,"method":"handle","class":"Illuminate\\Session\\Middleware\\StartSession","code_snippet":{"49":"     * @return mixed","50":"     *\/","51":"    public function handle($request, Closure $next)","52":"    {","53":"        if (! $this-\u003EsessionConfigured()) {","54":"            return $next($request);","55":"        }","56":"","57":"        $session = $this-\u003EgetSession($request);","58":"","59":"        if ($this-\u003Emanager-\u003EshouldBlock() ||","60":"            ($request-\u003Eroute() instanceof Route \u0026\u0026 $request-\u003Eroute()-\u003ElocksFor())) {","61":"            return $this-\u003EhandleRequestWhileBlocking($request, $session, $next);","62":"        }","63":"","64":"        return $this-\u003EhandleStatefulRequest($request, $session, $next);","65":"    }","66":"","67":"    \/**","68":"     * Handle the given request within session state.","69":"     *","70":"     * @param  \\Illuminate\\Http\\Request  $request","71":"     * @param  \\Illuminate\\Contracts\\Session\\Session  $session","72":"     * @param  \\Closure  $next","73":"     * @return mixed","74":"     *\/","75":"    protected function handleRequestWhileBlocking(Request $request, $session, Closure $next)","76":"    {","77":"        if (! $request-\u003Eroute() instanceof Route) {","78":"            return;"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"session","value":"object","original_type":"Illuminate\\Session\\Store","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse.php","line_number":37,"method":"handle","class":"Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse","code_snippet":{"17":"    \/**","18":"     * Create a new CookieQueue instance.","19":"     *","20":"     * @param  \\Illuminate\\Contracts\\Cookie\\QueueingFactory  $cookies","21":"     * @return void","22":"     *\/","23":"    public function __construct(CookieJar $cookies)","24":"    {","25":"        $this-\u003Ecookies = $cookies;","26":"    }","27":"","28":"    \/**","29":"     * Handle an incoming request.","30":"     *","31":"     * @param  \\Illuminate\\Http\\Request  $request","32":"     * @param  \\Closure  $next","33":"     * @return mixed","34":"     *\/","35":"    public function handle($request, Closure $next)","36":"    {","37":"        $response = $next($request);","38":"","39":"        foreach ($this-\u003Ecookies-\u003EgetQueuedCookies() as $cookie) {","40":"            $response-\u003Eheaders-\u003EsetCookie($cookie);","41":"        }","42":"","43":"        return $response;","44":"    }","45":"}","46":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Cookie\\Middleware\\EncryptCookies.php","line_number":67,"method":"handle","class":"Illuminate\\Cookie\\Middleware\\EncryptCookies","code_snippet":{"52":"     *\/","53":"    public function disableFor($name)","54":"    {","55":"        $this-\u003Eexcept = array_merge($this-\u003Eexcept, (array) $name);","56":"    }","57":"","58":"    \/**","59":"     * Handle an incoming request.","60":"     *","61":"     * @param  \\Illuminate\\Http\\Request  $request","62":"     * @param  \\Closure  $next","63":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","64":"     *\/","65":"    public function handle($request, Closure $next)","66":"    {","67":"        return $this-\u003Eencrypt($next($this-\u003Edecrypt($request)));","68":"    }","69":"","70":"    \/**","71":"     * Decrypt the cookies on the request.","72":"     *","73":"     * @param  \\Symfony\\Component\\HttpFoundation\\Request  $request","74":"     * @return \\Symfony\\Component\\HttpFoundation\\Request","75":"     *\/","76":"    protected function decrypt(Request $request)","77":"    {","78":"        foreach ($request-\u003Ecookies as $key =\u003E $cookie) {","79":"            if ($this-\u003EisDisabled($key)) {","80":"                continue;","81":"            }"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":119,"method":"then","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"104":"        return $this;","105":"    }","106":"","107":"    \/**","108":"     * Run the pipeline with a final destination callback.","109":"     *","110":"     * @param  \\Closure  $destination","111":"     * @return mixed","112":"     *\/","113":"    public function then(Closure $destination)","114":"    {","115":"        $pipeline = array_reduce(","116":"            array_reverse($this-\u003Epipes()), $this-\u003Ecarry(), $this-\u003EprepareDestination($destination)","117":"        );","118":"","119":"        return $pipeline($this-\u003Epassable);","120":"    }","121":"","122":"    \/**","123":"     * Run the pipeline and return the result.","124":"     *","125":"     * @return mixed","126":"     *\/","127":"    public function thenReturn()","128":"    {","129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":805,"method":"runRouteWithinStack","class":"Illuminate\\Routing\\Router","code_snippet":{"790":"     *","791":"     * @param  \\Illuminate\\Routing\\Route  $route","792":"     * @param  \\Illuminate\\Http\\Request  $request","793":"     * @return mixed","794":"     *\/","795":"    protected function runRouteWithinStack(Route $route, Request $request)","796":"    {","797":"        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026","798":"                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;","799":"","800":"        $middleware = $shouldSkipMiddleware ? [] : $this-\u003EgatherRouteMiddleware($route);","801":"","802":"        return (new Pipeline($this-\u003Econtainer))","803":"                        -\u003Esend($request)","804":"                        -\u003Ethrough($middleware)","805":"                        -\u003Ethen(fn ($request) =\u003E $this-\u003EprepareResponse(","806":"                            $request, $route-\u003Erun()","807":"                        ));","808":"    }","809":"","810":"    \/**","811":"     * Gather the middleware for the given route with resolved class names.","812":"     *","813":"     * @param  \\Illuminate\\Routing\\Route  $route","814":"     * @return array","815":"     *\/","816":"    public function gatherRouteMiddleware(Route $route)","817":"    {","818":"        return $this-\u003EresolveMiddleware($route-\u003EgatherMiddleware(), $route-\u003EexcludedMiddleware());","819":"    }"},"arguments":[{"name":"destination","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php:805-807","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":784,"method":"runRoute","class":"Illuminate\\Routing\\Router","code_snippet":{"769":"","770":"    \/**","771":"     * Return the response for the given route.","772":"     *","773":"     * @param  \\Illuminate\\Http\\Request  $request","774":"     * @param  \\Illuminate\\Routing\\Route  $route","775":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","776":"     *\/","777":"    protected function runRoute(Request $request, Route $route)","778":"    {","779":"        $request-\u003EsetRouteResolver(fn () =\u003E $route);","780":"","781":"        $this-\u003Eevents-\u003Edispatch(new RouteMatched($route, $request));","782":"","783":"        return $this-\u003EprepareResponse($request,","784":"            $this-\u003ErunRouteWithinStack($route, $request)","785":"        );","786":"    }","787":"","788":"    \/**","789":"     * Run the given route within a Stack \u0022onion\u0022 instance.","790":"     *","791":"     * @param  \\Illuminate\\Routing\\Route  $route","792":"     * @param  \\Illuminate\\Http\\Request  $request","793":"     * @return mixed","794":"     *\/","795":"    protected function runRouteWithinStack(Route $route, Request $request)","796":"    {","797":"        $shouldSkipMiddleware = $this-\u003Econtainer-\u003Ebound(\u0027middleware.disable\u0027) \u0026\u0026","798":"                                $this-\u003Econtainer-\u003Emake(\u0027middleware.disable\u0027) === true;"},"arguments":[{"name":"route","value":"object","original_type":"Illuminate\\Routing\\Route","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":748,"method":"dispatchToRoute","class":"Illuminate\\Routing\\Router","code_snippet":{"733":"    public function dispatch(Request $request)","734":"    {","735":"        $this-\u003EcurrentRequest = $request;","736":"","737":"        return $this-\u003EdispatchToRoute($request);","738":"    }","739":"","740":"    \/**","741":"     * Dispatch the request to a route and return the response.","742":"     *","743":"     * @param  \\Illuminate\\Http\\Request  $request","744":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","745":"     *\/","746":"    public function dispatchToRoute(Request $request)","747":"    {","748":"        return $this-\u003ErunRoute($request, $this-\u003EfindRoute($request));","749":"    }","750":"","751":"    \/**","752":"     * Find the route matching a given request.","753":"     *","754":"     * @param  \\Illuminate\\Http\\Request  $request","755":"     * @return \\Illuminate\\Routing\\Route","756":"     *\/","757":"    protected function findRoute($request)","758":"    {","759":"        $this-\u003Eevents-\u003Edispatch(new Routing($request));","760":"","761":"        $this-\u003Ecurrent = $route = $this-\u003Eroutes-\u003Ematch($request);","762":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"route","value":"object","original_type":"Illuminate\\Routing\\Route","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Routing\\Router.php","line_number":737,"method":"dispatch","class":"Illuminate\\Routing\\Router","code_snippet":{"722":"        $route = tap($this-\u003Eroutes-\u003EgetByName($name))-\u003Ebind($this-\u003EcurrentRequest);","723":"","724":"        return $this-\u003ErunRoute($this-\u003EcurrentRequest, $route);","725":"    }","726":"","727":"    \/**","728":"     * Dispatch the request to the application.","729":"     *","730":"     * @param  \\Illuminate\\Http\\Request  $request","731":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","732":"     *\/","733":"    public function dispatch(Request $request)","734":"    {","735":"        $this-\u003EcurrentRequest = $request;","736":"","737":"        return $this-\u003EdispatchToRoute($request);","738":"    }","739":"","740":"    \/**","741":"     * Dispatch the request to a route and return the response.","742":"     *","743":"     * @param  \\Illuminate\\Http\\Request  $request","744":"     * @return \\Symfony\\Component\\HttpFoundation\\Response","745":"     *\/","746":"    public function dispatchToRoute(Request $request)","747":"    {","748":"        return $this-\u003ErunRoute($request, $this-\u003EfindRoute($request));","749":"    }","750":"","751":"    \/**"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php","line_number":200,"method":"Illuminate\\Foundation\\Http\\{closure}","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"185":"        if (! $this-\u003Eapp-\u003EhasBeenBootstrapped()) {","186":"            $this-\u003Eapp-\u003EbootstrapWith($this-\u003Ebootstrappers());","187":"        }","188":"    }","189":"","190":"    \/**","191":"     * Get the route dispatcher callback.","192":"     *","193":"     * @return \\Closure","194":"     *\/","195":"    protected function dispatchToRouter()","196":"    {","197":"        return function ($request) {","198":"            $this-\u003Eapp-\u003Einstance(\u0027request\u0027, $request);","199":"","200":"            return $this-\u003Erouter-\u003Edispatch($request);","201":"        };","202":"    }","203":"","204":"    \/**","205":"     * Call the terminate method on any terminable middleware.","206":"     *","207":"     * @param  \\Illuminate\\Http\\Request  $request","208":"     * @param  \\Illuminate\\Http\\Response  $response","209":"     * @return void","210":"     *\/","211":"    public function terminate($request, $response)","212":"    {","213":"        $this-\u003EterminateMiddleware($request, $response);","214":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":144,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":"","134":"    \/**","135":"     * Get the final piece of the Closure onion.","136":"     *","137":"     * @param  \\Closure  $destination","138":"     * @return \\Closure","139":"     *\/","140":"    protected function prepareDestination(Closure $destination)","141":"    {","142":"        return function ($passable) use ($destination) {","143":"            try {","144":"                return $destination($passable);","145":"            } catch (Throwable $e) {","146":"                return $this-\u003EhandleException($passable, $e);","147":"            }","148":"        };","149":"    }","150":"","151":"    \/**","152":"     * Get a Closure that represents a slice of the application onion.","153":"     *","154":"     * @return \\Closure","155":"     *\/","156":"    protected function carry()","157":"    {","158":"        return function ($stack, $pipe) {"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest.php","line_number":21,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest","code_snippet":{"6":"use Symfony\\Component\\HttpFoundation\\ParameterBag;","7":"","8":"class TransformsRequest","9":"{","10":"    \/**","11":"     * Handle an incoming request.","12":"     *","13":"     * @param  \\Illuminate\\Http\\Request  $request","14":"     * @param  \\Closure  $next","15":"     * @return mixed","16":"     *\/","17":"    public function handle($request, Closure $next)","18":"    {","19":"        $this-\u003Eclean($request);","20":"","21":"        return $next($request);","22":"    }","23":"","24":"    \/**","25":"     * Clean the request\u0027s data.","26":"     *","27":"     * @param  \\Illuminate\\Http\\Request  $request","28":"     * @return void","29":"     *\/","30":"    protected function clean($request)","31":"    {","32":"        $this-\u003EcleanParameterBag($request-\u003Equery);","33":"","34":"        if ($request-\u003EisJson()) {","35":"            $this-\u003EcleanParameterBag($request-\u003Ejson());"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull.php","line_number":31,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\ConvertEmptyStringsToNull","code_snippet":{"16":"    \/**","17":"     * Handle an incoming request.","18":"     *","19":"     * @param  \\Illuminate\\Http\\Request  $request","20":"     * @param  \\Closure  $next","21":"     * @return mixed","22":"     *\/","23":"    public function handle($request, Closure $next)","24":"    {","25":"        foreach (static::$skipCallbacks as $callback) {","26":"            if ($callback($request)) {","27":"                return $next($request);","28":"            }","29":"        }","30":"","31":"        return parent::handle($request, $next);","32":"    }","33":"","34":"    \/**","35":"     * Transform the given value.","36":"     *","37":"     * @param  string  $key","38":"     * @param  mixed  $value","39":"     * @return mixed","40":"     *\/","41":"    protected function transform($key, $value)","42":"    {","43":"        return $value === \u0027\u0027 ? null : $value;","44":"    }","45":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:142-148","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:142-148","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest.php","line_number":21,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest","code_snippet":{"6":"use Symfony\\Component\\HttpFoundation\\ParameterBag;","7":"","8":"class TransformsRequest","9":"{","10":"    \/**","11":"     * Handle an incoming request.","12":"     *","13":"     * @param  \\Illuminate\\Http\\Request  $request","14":"     * @param  \\Closure  $next","15":"     * @return mixed","16":"     *\/","17":"    public function handle($request, Closure $next)","18":"    {","19":"        $this-\u003Eclean($request);","20":"","21":"        return $next($request);","22":"    }","23":"","24":"    \/**","25":"     * Clean the request\u0027s data.","26":"     *","27":"     * @param  \\Illuminate\\Http\\Request  $request","28":"     * @return void","29":"     *\/","30":"    protected function clean($request)","31":"    {","32":"        $this-\u003EcleanParameterBag($request-\u003Equery);","33":"","34":"        if ($request-\u003EisJson()) {","35":"            $this-\u003EcleanParameterBag($request-\u003Ejson());"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\TrimStrings.php","line_number":40,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\TrimStrings","code_snippet":{"25":"    \/**","26":"     * Handle an incoming request.","27":"     *","28":"     * @param  \\Illuminate\\Http\\Request  $request","29":"     * @param  \\Closure  $next","30":"     * @return mixed","31":"     *\/","32":"    public function handle($request, Closure $next)","33":"    {","34":"        foreach (static::$skipCallbacks as $callback) {","35":"            if ($callback($request)) {","36":"                return $next($request);","37":"            }","38":"        }","39":"","40":"        return parent::handle($request, $next);","41":"    }","42":"","43":"    \/**","44":"     * Transform the given value.","45":"     *","46":"     * @param  string  $key","47":"     * @param  mixed  $value","48":"     * @return mixed","49":"     *\/","50":"    protected function transform($key, $value)","51":"    {","52":"        if (in_array($key, $this-\u003Eexcept, true) || ! is_string($value)) {","53":"            return $value;","54":"        }"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize.php","line_number":27,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize","code_snippet":{"12":"     *","13":"     * @param  \\Illuminate\\Http\\Request  $request","14":"     * @param  \\Closure  $next","15":"     * @return mixed","16":"     *","17":"     * @throws \\Illuminate\\Http\\Exceptions\\PostTooLargeException","18":"     *\/","19":"    public function handle($request, Closure $next)","20":"    {","21":"        $max = $this-\u003EgetPostMaxSize();","22":"","23":"        if ($max \u003E 0 \u0026\u0026 $request-\u003Eserver(\u0027CONTENT_LENGTH\u0027) \u003E $max) {","24":"            throw new PostTooLargeException;","25":"        }","26":"","27":"        return $next($request);","28":"    }","29":"","30":"    \/**","31":"     * Determine the server \u0027post_max_size\u0027 as bytes.","32":"     *","33":"     * @return int","34":"     *\/","35":"    protected function getPostMaxSize()","36":"    {","37":"        if (is_numeric($postMaxSize = ini_get(\u0027post_max_size\u0027))) {","38":"            return (int) $postMaxSize;","39":"        }","40":"","41":"        $metric = strtoupper(substr($postMaxSize, -1));"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance.php","line_number":99,"method":"handle","class":"Illuminate\\Foundation\\Http\\Middleware\\PreventRequestsDuringMaintenance","code_snippet":{"84":"                return response(","85":"                    $data[\u0027template\u0027],","86":"                    $data[\u0027status\u0027] ?? 503,","87":"                    $this-\u003EgetHeaders($data)","88":"                );","89":"            }","90":"","91":"            throw new HttpException(","92":"                $data[\u0027status\u0027] ?? 503,","93":"                \u0027Service Unavailable\u0027,","94":"                null,","95":"                $this-\u003EgetHeaders($data)","96":"            );","97":"        }","98":"","99":"        return $next($request);","100":"    }","101":"","102":"    \/**","103":"     * Determine if the incoming request has a maintenance mode bypass cookie.","104":"     *","105":"     * @param  \\Illuminate\\Http\\Request  $request","106":"     * @param  array  $data","107":"     * @return bool","108":"     *\/","109":"    protected function hasValidBypassCookie($request, array $data)","110":"    {","111":"        return isset($data[\u0027secret\u0027]) \u0026\u0026","112":"                $request-\u003Ecookie(\u0027laravel_maintenance\u0027) \u0026\u0026","113":"                MaintenanceModeBypassCookie::isValid("},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Http\\Middleware\\HandleCors.php","line_number":49,"method":"handle","class":"Illuminate\\Http\\Middleware\\HandleCors","code_snippet":{"34":"    {","35":"        $this-\u003Econtainer = $container;","36":"        $this-\u003Ecors = $cors;","37":"    }","38":"","39":"    \/**","40":"     * Handle the incoming request.","41":"     *","42":"     * @param  \\Illuminate\\Http\\Request  $request","43":"     * @param  \\Closure  $next","44":"     * @return \\Illuminate\\Http\\Response","45":"     *\/","46":"    public function handle($request, Closure $next)","47":"    {","48":"        if (! $this-\u003EhasMatchingPath($request)) {","49":"            return $next($request);","50":"        }","51":"","52":"        $this-\u003Ecors-\u003EsetOptions($this-\u003Econtainer[\u0027config\u0027]-\u003Eget(\u0027cors\u0027, []));","53":"","54":"        if ($this-\u003Ecors-\u003EisPreflightRequest($request)) {","55":"            $response = $this-\u003Ecors-\u003EhandlePreflightRequest($request);","56":"","57":"            $this-\u003Ecors-\u003EvaryHeader($response, \u0027Access-Control-Request-Method\u0027);","58":"","59":"            return $response;","60":"        }","61":"","62":"        $response = $next($request);","63":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Http\\Middleware\\TrustProxies.php","line_number":39,"method":"handle","class":"Illuminate\\Http\\Middleware\\TrustProxies","code_snippet":{"24":"    \/**","25":"     * Handle an incoming request.","26":"     *","27":"     * @param  \\Illuminate\\Http\\Request  $request","28":"     * @param  \\Closure  $next","29":"     * @return mixed","30":"     *","31":"     * @throws \\Symfony\\Component\\HttpKernel\\Exception\\HttpException","32":"     *\/","33":"    public function handle(Request $request, Closure $next)","34":"    {","35":"        $request::setTrustedProxies([], $this-\u003EgetTrustedHeaderNames());","36":"","37":"        $this-\u003EsetTrustedProxyIpAddresses($request);","38":"","39":"        return $next($request);","40":"    }","41":"","42":"    \/**","43":"     * Sets the trusted proxies on the request.","44":"     *","45":"     * @param  \\Illuminate\\Http\\Request  $request","46":"     * @return void","47":"     *\/","48":"    protected function setTrustedProxyIpAddresses(Request $request)","49":"    {","50":"        $trustedIps = $this-\u003Eproxies() ?: config(\u0027trustedproxy.proxies\u0027);","51":"","52":"        if ($trustedIps === \u0027*\u0027 || $trustedIps === \u0027**\u0027) {","53":"            return $this-\u003EsetTrustedProxyIpAddressesToTheCallingIp($request);"},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":183,"method":"Illuminate\\Pipeline\\{closure}","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"168":"","169":"                        \/\/ If the pipe is a string we will parse the string and resolve the class out","170":"                        \/\/ of the dependency injection container. We can then build a callable and","171":"                        \/\/ execute the pipe function giving in the parameters that are required.","172":"                        $pipe = $this-\u003EgetContainer()-\u003Emake($name);","173":"","174":"                        $parameters = array_merge([$passable, $stack], $parameters);","175":"                    } else {","176":"                        \/\/ If the pipe is already an object we\u0027ll just make a callable and pass it to","177":"                        \/\/ the pipe as-is. There is no need to do any extra parsing and formatting","178":"                        \/\/ since the object we\u0027re given was already a fully instantiated object.","179":"                        $parameters = [$passable, $stack];","180":"                    }","181":"","182":"                    $carry = method_exists($pipe, $this-\u003Emethod)","183":"                                    ? $pipe-\u003E{$this-\u003Emethod}(...$parameters)","184":"                                    : $pipe(...$parameters);","185":"","186":"                    return $this-\u003EhandleCarry($carry);","187":"                } catch (Throwable $e) {","188":"                    return $this-\u003EhandleException($passable, $e);","189":"                }","190":"            };","191":"        };","192":"    }","193":"","194":"    \/**","195":"     * Parse full pipe string to get name and parameters.","196":"     *","197":"     * @param  string  $pipe"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false},{"name":"next","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php:159-190","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Pipeline\\Pipeline.php","line_number":119,"method":"then","class":"Illuminate\\Pipeline\\Pipeline","code_snippet":{"104":"        return $this;","105":"    }","106":"","107":"    \/**","108":"     * Run the pipeline with a final destination callback.","109":"     *","110":"     * @param  \\Closure  $destination","111":"     * @return mixed","112":"     *\/","113":"    public function then(Closure $destination)","114":"    {","115":"        $pipeline = array_reduce(","116":"            array_reverse($this-\u003Epipes()), $this-\u003Ecarry(), $this-\u003EprepareDestination($destination)","117":"        );","118":"","119":"        return $pipeline($this-\u003Epassable);","120":"    }","121":"","122":"    \/**","123":"     * Run the pipeline and return the result.","124":"     *","125":"     * @return mixed","126":"     *\/","127":"    public function thenReturn()","128":"    {","129":"        return $this-\u003Ethen(function ($passable) {","130":"            return $passable;","131":"        });","132":"    }","133":""},"arguments":[{"name":"arg0","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php","line_number":175,"method":"sendRequestThroughRouter","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"160":"     *","161":"     * @param  \\Illuminate\\Http\\Request  $request","162":"     * @return \\Illuminate\\Http\\Response","163":"     *\/","164":"    protected function sendRequestThroughRouter($request)","165":"    {","166":"        $this-\u003Eapp-\u003Einstance(\u0027request\u0027, $request);","167":"","168":"        Facade::clearResolvedInstance(\u0027request\u0027);","169":"","170":"        $this-\u003Ebootstrap();","171":"","172":"        return (new Pipeline($this-\u003Eapp))","173":"                    -\u003Esend($request)","174":"                    -\u003Ethrough($this-\u003Eapp-\u003EshouldSkipMiddleware() ? [] : $this-\u003Emiddleware)","175":"                    -\u003Ethen($this-\u003EdispatchToRouter());","176":"    }","177":"","178":"    \/**","179":"     * Bootstrap the application for HTTP requests.","180":"     *","181":"     * @return void","182":"     *\/","183":"    public function bootstrap()","184":"    {","185":"        if (! $this-\u003Eapp-\u003EhasBeenBootstrapped()) {","186":"            $this-\u003Eapp-\u003EbootstrapWith($this-\u003Ebootstrappers());","187":"        }","188":"    }","189":""},"arguments":[{"name":"destination","value":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php:197-201","original_type":"Closure","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\Http\\Kernel.php","line_number":144,"method":"handle","class":"Illuminate\\Foundation\\Http\\Kernel","code_snippet":{"129":"    }","130":"","131":"    \/**","132":"     * Handle an incoming HTTP request.","133":"     *","134":"     * @param  \\Illuminate\\Http\\Request  $request","135":"     * @return \\Illuminate\\Http\\Response","136":"     *\/","137":"    public function handle($request)","138":"    {","139":"        $this-\u003ErequestStartedAt = Carbon::now();","140":"","141":"        try {","142":"            $request-\u003EenableHttpMethodParameterOverride();","143":"","144":"            $response = $this-\u003EsendRequestThroughRouter($request);","145":"        } catch (Throwable $e) {","146":"            $this-\u003EreportException($e);","147":"","148":"            $response = $this-\u003ErenderException($request, $e);","149":"        }","150":"","151":"        $this-\u003Eapp[\u0027events\u0027]-\u003Edispatch(","152":"            new RequestHandled($request, $response)","153":"        );","154":"","155":"        return $response;","156":"    }","157":"","158":"    \/**"},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":false},{"file":"D:\\Projects\\my-projects\\peta-log\\public\\index.php","line_number":51,"method":"require_once","class":null,"code_snippet":{"27":"|","28":"| Composer provides a convenient, automatically generated class loader for","29":"| this application. We just need to utilize it! We\u0027ll simply require it","30":"| into the script here so we don\u0027t need to manually load our classes.","31":"|","32":"*\/","33":"","34":"require __DIR__.\u0027\/..\/vendor\/autoload.php\u0027;","35":"","36":"\/*","37":"|--------------------------------------------------------------------------","38":"| Run The Application","39":"|--------------------------------------------------------------------------","40":"|","41":"| Once we have the application, we can handle the incoming request using","42":"| the application\u0027s HTTP kernel. Then, we will send the response back","43":"| to this client\u0027s browser, allowing them to enjoy our application.","44":"|","45":"*\/","46":"","47":"$app = require_once __DIR__.\u0027\/..\/bootstrap\/app.php\u0027;","48":"","49":"$kernel = $app-\u003Emake(Kernel::class);","50":"","51":"$response = $kernel-\u003Ehandle(","52":"    $request = Request::capture()","53":")-\u003Esend();","54":"","55":"$kernel-\u003Eterminate($request, $response);","56":""},"arguments":[{"name":"request","value":"GET http:\/\/localhost:8000\/test","original_type":"Illuminate\\Http\\Request","passed_by_reference":false,"is_variadic":false,"truncated":false}],"application_frame":true},{"file":"D:\\Projects\\my-projects\\peta-log\\vendor\\laravel\\framework\\src\\Illuminate\\Foundation\\resources\\server.php","line_number":16,"method":"[top]","class":null,"code_snippet":{"1":"\u003C?php","2":"","3":"$publicPath = getcwd();","4":"","5":"$uri = urldecode(","6":"    parse_url($_SERVER[\u0027REQUEST_URI\u0027], PHP_URL_PATH) ?? \u0027\u0027","7":");","8":"","9":"\/\/ This file allows us to emulate Apache\u0027s \u0022mod_rewrite\u0022 functionality from the","10":"\/\/ built-in PHP web server. This provides a convenient way to test a Laravel","11":"\/\/ application without having installed a \u0022real\u0022 web server software here.","12":"if ($uri !== \u0027\/\u0027 \u0026\u0026 file_exists($publicPath.$uri)) {","13":"    return false;","14":"}","15":"","16":"require_once $publicPath.\u0027\/index.php\u0027;","17":""},"arguments":[],"application_frame":false}],"context":{"request":{"url":"http:\/\/localhost:8000\/test","ip":null,"method":"GET","useragent":"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/119.0.0.0 Safari\/537.36 OPR\/105.0.0.0"},"request_data":{"queryString":[],"body":[],"files":[]},"headers":{"host":"localhost:8000","connection":"keep-alive","sec-ch-ua":"\u0022Opera GX\u0022;v=\u0022105\u0022, \u0022Chromium\u0022;v=\u0022119\u0022, \u0022Not?A_Brand\u0022;v=\u002224\u0022","sec-ch-ua-mobile":"?0","sec-ch-ua-platform":"\u0022Windows\u0022","upgrade-insecure-requests":"1","user-agent":"Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/119.0.0.0 Safari\/537.36 OPR\/105.0.0.0","accept":"text\/html,application\/xhtml+xml,application\/xml;q=0.9,image\/avif,image\/webp,image\/apng,*\/*;q=0.8,application\/signed-exchange;v=b3;q=0.7","sec-fetch-site":"none","sec-fetch-mode":"navigate","sec-fetch-user":"?1","sec-fetch-dest":"document","accept-encoding":"gzip, deflate, br","accept-language":"ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7","cookie":"_ga=GA1.1.846799490.1703169721; PHPSESSID=aggn7aha12v9gt1km8304shd11; __stripe_mid=1c580144-1ffc-4816-8a65-bd1008e478b1f2e851; _fbp=fb.0.1703502851056.1149035756; _ga_J15438RNF9=GS1.1.1703685261.4.1.1703685393.0.0.0; transition_admin_id=eyJpdiI6InVtRjhmMkxxZUlPWXI4ckxzNEZaeGc9PSIsInZhbHVlIjoiZ3djM1ZZRG12eDUraG8vaWMzRCtEaWdSdklaamhrbkRjWTZYZCtDZlpMMHBlZ0tIQ0t5STA4QTU1elRKVkREdSIsIm1hYyI6ImU5ZTFjOWEwNjAzNzZkODAxMTZlNzZhMDQ2MDBkZDAwZjY3NTFmZjBjODIwNjVlNmQ1ODQ5ZGY3NzJjZTUxMDkiLCJ0YWciOiIifQ%3D%3D; transition_id_71=eyJpdiI6InNUeFNCOEwzazd5bTdMVDIzS2NVQ0E9PSIsInZhbHVlIjoic2tGK3VTTmFMWXdEUXlHTmdtNmN3dnN5d2FMbVoybEZqVGFnVzBVQ2l6VHQ1VTdWTFRibU9JZzFEVTk4cUFLVyIsIm1hYyI6IjNkNWY3YzNhMDUxM2ZmYzBmMGNmZTlhNmMxMGQ2ODgyZTExMjA0ZTI2OGVlODIwZmY1OWYwMWU1OTcwYTM0NjciLCJ0YWciOiIifQ%3D%3D; transition_name_71=eyJpdiI6InBreE9Ha1JRQzU5N0k2QzZNTGU4blE9PSIsInZhbHVlIjoiUDBxOVQrRTdPTXJLcGx0cFVkakxNc3orZHpic3NXL2wrMExkeUovMUJLTHBzZ3ExSjdVSENVZ2hTeU9tSVU0YWIxMUFrcmlOTXFpc3ZYN1dzc2dDU2c9PSIsIm1hYyI6Ijg5NWMyNzViZThlODY4YjYxOTE1ODI5OWUzZTQyZGIyMGFkZWYxMmZhN2YwMWQ5OGNiMjE3YjFlMDQ1MWYxOWMiLCJ0YWciOiIifQ%3D%3D; _ga_R5ZKQ7648B=GS1.1.1704575053.12.0.1704575053.0.0.0; _ga_XHT8HB4P96=GS1.1.1704575053.12.0.1704575053.60.0.0; transition_id_183=eyJpdiI6ImNSeW1UWkhWbHMxV1lPQ3kvYmdUTVE9PSIsInZhbHVlIjoiNlcxdHdJV1ZoS09yNHZBT2tJR3VSK0RCSzV5SGg3ZzVhaGVPVndYcWNMWk9weVlmZC8wc3ZRRFB5UVFETXVOViIsIm1hYyI6IjU3MWZlMGEyNzRjY2UyNmVkOWNmZGJkMWE4ZWM5YmNlNjc3NGQ3NDllNjBiOWRhMzY2NGEwNTAxMDZiYzJhM2YiLCJ0YWciOiIifQ%3D%3D; transition_name_183=eyJpdiI6ImhSbGJZSXdFWWFPRWMwaDlJUjFTZFE9PSIsInZhbHVlIjoibnRIN2hEajIvR2V6c3dnZzM1cEFzaEdHaWlsak9HbWxUeTV2L3l2eHFrbTFyUXBzSk1BNFl4MHdiYks2RGNlWDF0YzBjUjJTYkg5aUxqRSs0VnNyelE9PSIsIm1hYyI6ImY5NTUyMmRkM2RjMjUxY2I3YmFhOGUxZGFiODBjYTMxZjUxZGVkZGIyNDdiNWQ5Y2U3Njg5ODQ5ZmJkN2U4NGQiLCJ0YWciOiIifQ%3D%3D; XSRF-TOKEN=eyJpdiI6Img3aHlJQWM2bDFvaVVUTUh1V0pRcGc9PSIsInZhbHVlIjoiODlMaEpvVWJEcG8wZUQvTzRhL240UVROZHN3SGwrKzBvOFZGb2w1L05YRDZZTzFxZ1FzbWNiVWJacVUzNFJNL0tLSGJwT1ZIc0gzZDFUaW5OWXZpWnJ3WWJuaThVNmlENmVtNzJFSzdTWFpyQi9WdTE3ZmZVNmdPT0I3azdZYlAiLCJtYWMiOiI5NTkzNThkNDQxZjBhYWJlYjA1YTNjMGJiZmE2YjFkM2YwNDQ4YTY5YzdiMzNiMDNiMTQ1NzRjODQyNWFjMDk1IiwidGFnIjoiIn0%3D; laravel_session=eyJpdiI6IndEczAwbGRiWE5QS0RwaGFKSFRDMkE9PSIsInZhbHVlIjoiQkJpVE9jZjFHQXRjazNKcDg4M1RqdmdxRUpndEVJVkdRdTZHVm9DTm1KZ0kyS205a2xIRFFEVWMyemwvdlBRQkU0UXpXSlpla3AvRkVqUDlUdWVhLzQ3c2ZIR1VGdHFGUXE3Y1E3WWJUUU56Qk1iWlhLamt6Y1hDSGMyMkVaL04iLCJtYWMiOiI2MTIzZGYyNWI5N2M5N2YyODM1ZGQ4MTdjMDc2ZjdkYzMwNjFlMGY4ZmNmNTlmMTUzYjBmMzdmMGFhYmJjZGEzIiwidGFnIjoiIn0%3D"},"cookies":{"_ga":null,"PHPSESSID":null,"__stripe_mid":null,"_fbp":null,"_ga_J15438RNF9":null,"transition_admin_id":null,"transition_id_71":null,"transition_name_71":null,"_ga_R5ZKQ7648B":null,"_ga_XHT8HB4P96":null,"transition_id_183":null,"transition_name_183":null,"XSRF-TOKEN":"e82gUK9uIWvigk5scf6PwBwoB2KwY9mGjmzxXSzF","laravel_session":"UbqjYq2L2FrQKZnMgMKTz52JrnipRQqtmKxROkAV"},"session":{"_previous":{"url":"http:\/\/localhost:8000\/get_content\/2"},"_flash":{"old":[],"new":[]},"_token":"e82gUK9uIWvigk5scf6PwBwoB2KwY9mGjmzxXSzF","url":[],"login_moonshine_59ba36addc2b2f9401580f014c7f58ea4e30989d":1,"password_hash_moonshine":"$2y$12$fRWxRrZw4aYHAVtX6kq7fO87E1SoA5XlVw3t4.y9ZN.Sdwb31Z0fW"},"route":{"route":null,"routeParameters":[],"controllerAction":"App\\Http\\Controllers\\TestController@index","middleware":["web"]},"env":{"php_version":"8.2.0","laravel_version":"10.40.0","laravel_locale":"en","laravel_config_cached":false,"app_debug":true,"app_env":"local"},"dumps":[],"logs":[],"queries":[]},"stage":"local","message_level":null,"open_frame_index":null,"application_path":"D:\\Projects\\my-projects\\peta-log","application_version":null,"tracking_uuid":"19439ff3-7d6e-4cc3-a85b-406fbc7a87c1"},"config":{"editor":"phpstorm","theme":"auto","hideSolutions":false,"remoteSitesPath":"D:\\Projects\\my-projects\\peta-log","localSitesPath":"","enableShareButton":true,"enableRunnableSolutions":false,"directorySeparator":"\\","editorOptions":{"clipboard":{"label":"Clipboard","url":"%path:%line","clipboard":true},"sublime":{"label":"Sublime","url":"subl:\/\/open?url=file:\/\/%path\u0026line=%line"},"textmate":{"label":"TextMate","url":"txmt:\/\/open?url=file:\/\/%path\u0026line=%line"},"emacs":{"label":"Emacs","url":"emacs:\/\/open?url=file:\/\/%path\u0026line=%line"},"macvim":{"label":"MacVim","url":"mvim:\/\/open\/?url=file:\/\/%path\u0026line=%line"},"phpstorm":{"label":"PhpStorm","url":"phpstorm:\/\/open?file=%path\u0026line=%line"},"phpstorm-remote":{"label":"PHPStorm Remote","url":"javascript:r = new XMLHttpRequest;r.open(\u0022get\u0022, \u0022http:\/\/localhost:63342\/api\/file\/%path:%line\u0022);r.send()"},"idea":{"label":"Idea","url":"idea:\/\/open?file=%path\u0026line=%line"},"vscode":{"label":"VS Code","url":"vscode:\/\/file\/%path:%line"},"vscode-insiders":{"label":"VS Code Insiders","url":"vscode-insiders:\/\/file\/%path:%line"},"vscode-remote":{"label":"VS Code Remote","url":"vscode:\/\/vscode-remote\/%path:%line"},"vscode-insiders-remote":{"label":"VS Code Insiders Remote","url":"vscode-insiders:\/\/vscode-remote\/%path:%line"},"vscodium":{"label":"VS Codium","url":"vscodium:\/\/file\/%path:%line"},"atom":{"label":"Atom","url":"atom:\/\/core\/open\/file?filename=%path\u0026line=%line"},"nova":{"label":"Nova","url":"nova:\/\/open?path=%path\u0026line=%line"},"netbeans":{"label":"NetBeans","url":"netbeans:\/\/open\/?f=%path:%line"},"xdebug":{"label":"Xdebug","url":"xdebug:\/\/%path@%line"}},"shareEndpoint":"https:\/\/flareapp.io\/api\/public-reports"},"solutions":[],"updateConfigEndpoint":"\/_ignition\/update-config"};
